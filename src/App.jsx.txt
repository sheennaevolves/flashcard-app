import { useState, useEffect } from "react";

const flashcards = [
  { term: "acronym", definition: "A word formed from the initial letter of the major parts of a compound term." },
  { term: "acute", definition: "Condition that has a rapid onset, a severe course, and a relatively short duration." },
  { term: "angiography", definition: "Process of producing an x-ray study of blood vessels after injection of a contrast medium." },
  { term: "appendectomy", definition: "Surgical removal of the appendix." },
  { term: "arteriosclerosis", definition: "Abnormal hardening of the walls of an artery or arteries." },
  { term: "aden/o", definition: "Gland." },
  { term: "adip/o", definition: "Fat." },
  { term: "anter/o", definition: "Before, front." },
  { term: "caud/o", definition: "Lower part of body, tail." },
  { term: "cephal/o", definition: "Head." },
];

export default function FlashcardApp() {
  const [mode, setMode] = useState("flashcards"); 
  const [index, setIndex] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);
  const [score, setScore] = useState(0);
  const [testComplete, setTestComplete] = useState(false);
  const [matches, setMatches] = useState({});
  const [draggedTerm, setDraggedTerm] = useState(null);

  const [timeLeft, setTimeLeft] = useState(60);
  const [timerActive, setTimerActive] = useState(false);
  const [warningActive, setWarningActive] = useState(false);

  // Timer effect with visual warning and auto-stop
  useEffect(() => {
    if (!timerActive) return;
    if (timeLeft <= 0) {
      setTimerActive(false);
      setWarningActive(false);
      if (mode === "test") setTestComplete(true);
      return;
    }
    if (timeLeft === 10) setWarningActive(true);

    const interval = setInterval(() => setTimeLeft(prev => prev - 1), 1000);
    return () => clearInterval(interval);
  }, [timeLeft, timerActive, mode]);

  const handleNext = () => {
    setShowAnswer(false);
    setIndex(prev => (prev + 1) % flashcards.length);
  };

  const handleAnswer = (choice) => {
    if (!timerActive) return; // stop answering if timer hit 0
    if (choice === flashcards[index].definition) {
      setScore(score + 1);
    }
    if (index + 1 === flashcards.length) {
      setTestComplete(true);
      setTimerActive(false);
    } else {
      setIndex(index + 1);
    }
  };

  const shuffle = (arr) => arr.sort(() => Math.random() - 0.5);

  const handleDrop = (term, definition) => {
    if (!timerActive) return; // stop dragging if timer hit 0
    const correctDef = flashcards.find(f => f.term === term)?.definition;
    if (definition === correctDef) setMatches({ ...matches, [term]: definition });
    setDraggedTerm(null);
  };

  const restart = () => {
    setIndex(0);
    setScore(0);
    setTestComplete(false);
    setMatches({});
    setShowAnswer(false);
    setTimeLeft(60);
    setWarningActive(false);
    if (mode === "test" || mode === "match") setTimerActive(true);
    else setTimerActive(false);
  };

  const backgroundImages = {
    flashcards: "/flashcards.jpg",
    test: "/test.jpg",
    match: "/match.jpg"
  };

  const switchMode = (newMode) => {
    setMode(newMode);
    restart();
  };

  return (
    <div
      className="min-h-screen bg-cover bg-center relative"
      style={{ backgroundImage: `url('${backgroundImages[mode]}')` }}
    >
      <div className="absolute inset-0 bg-black opacity-40"></div>

      <div className="relative z-10 p-6 max-w-2xl mx-auto text-white">
        <h1 className="text-2xl font-bold mb-4 text-center">AP Terminology Flashcards Demo</h1>

        <div className="flex justify-center gap-2 mb-6">
          <button className="px-3 py-1 bg-blue-500 text-white rounded" onClick={() => switchMode("flashcards")}>Flashcards</button>
          <button className="px-3 py-1 bg-green-500 text-white rounded" onClick={() => switchMode("test")}>Test</button>
          <button className="px-3 py-1 bg-purple-500 text-white rounded" onClick={() => switchMode("match")}>Match</button>
        </div>

        {warningActive && (
          <div className="bg-red-600 text-white font-bold text-center p-2 rounded mb-4 animate-pulse">
            Only 10 seconds left!
          </div>
        )}

        {/* Flashcard Mode */}
        {mode === "flashcards" && (
          <div className="bg-white bg-opacity-90 shadow-lg rounded-2xl p-6 text-center text-black">
            <p className="text-xl font-semibold">{flashcards[index].term}</p>
            {showAnswer && <p className="mt-4 text-gray-700">{flashcards[index].definition}</p>}
            <div className="mt-6 flex justify-center gap-2">
              <button className="px-3 py-1 bg-gray-200 rounded" onClick={() => setShowAnswer(!showAnswer)}>
                {showAnswer ? "Hide" : "Show"} Answer
              </button>
              <button className="px-3 py-1 bg-blue-200 rounded" onClick={handleNext}>Next</button>
            </div>
          </div>
        )}

        {/* Test Mode */}
        {mode === "test" && (
          <div className="bg-white bg-opacity-90 shadow-lg rounded-2xl p-6 text-center text-black">
            <p className="text-center font-bold mb-2">Time Left: {timeLeft}s</p>
            <p className="text-center font-bold mb-2">Score: {score}/{flashcards.length}</p>

            {!testComplete ? (
              <>
                <p className="text-xl font-semibold mb-4">{flashcards[index].term}</p>
                <div className="grid grid-cols-1 gap-2">
                  {shuffle([...flashcards.map(f => f.definition)]).slice(0,3).concat(flashcards[index].definition).sort(() => Math.random()-0.5).map((def,i)=>(
                    <button key={i} className="px-3 py-2 border rounded hover:bg-green-100" onClick={()=>handleAnswer(def)}>
                      {def}
                    </button>
                  ))}
                </div>
              </>
            ) : (
              <div>
                <p className="text-lg">Test Complete! Final Score: {score}/{flashcards.length}</p>
                <button className="mt-4 px-3 py-1 bg-blue-500 text-white rounded" onClick={restart}>Restart Test</button>
              </div>
            )}
          </div>
        )}

        {/* Match Mode */}
        {mode === "match" && (
          <div className="bg-white bg-opacity-90 shadow-lg rounded-2xl p-6 text-black">
            <p className="text-center mb-4">Drag the term to the correct definition</p>
            <p className="text-center font-bold mb-2">Time Left: {timeLeft}s</p>
            <p className="text-center font-bold mb-2">Matched: {Object.keys(matches).length}/{flashcards.length}</p>

            <div className="grid grid-cols-2 gap-4">
              <div>
                {flashcards.map((f,i)=>(
                  <div key={i} draggable onDragStart={()=>setDraggedTerm(f.term)} className={`p-2 border rounded mb-1 cursor-move ${matches[f.term]?"bg-green-200":"bg-gray-100"}`}>
                    {f.term}
                  </div>
                ))}
              </div>
              <div>
                {shuffle([...flashcards.map(f=>f.definition)]).map((d,i)=>(
                  <div key={i} onDragOver={e=>e.preventDefault()} onDrop={()=>draggedTerm && handleDrop(draggedTerm,d)} className={`p-2 border rounded mb-1 min-h-[40px] ${Object.values(matches).includes(d)?"bg-green-200":"bg-gray-50"}`}>
                    {d}
                  </div>
                ))}
              </div>
            </div>

            {(Object.keys(matches).length === flashcards.length || timeLeft === 0) && (
              <div className="text-center mt-4">
                <p className="text-green-600 font-semibold">All matches correct! ðŸŽ‰</p>
                <button className="mt-2 px-3 py-1 bg-blue-500 text-white rounded" onClick={restart}>Restart Match</button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
